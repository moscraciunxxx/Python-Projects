# -*- coding: utf-8 -*-
"""
Created on Tue Mar 15 22:19:24 2022

@author: moscr
"""

# PCA will identify the maximum covariation line between two or more data points and rotate the axes orthogonally
# Compress the data, dimension reduction 
#%% Inspect and clean the data

import numpy as np
import matplotlib.pyplot as plt 
from scipy.io import loadmat 

# from google.colab import drive 
# drive.mount('/content/gdrive')

matdat=loadmat('D:\Readings\Python\Spyder\MikeCohen\MasterPython_CodeAndData\stateSpaceTrajectories\ALMdata.mat')

Nopref=matdat['PSTH_nonprefer_cue_aligned']
Prefer=matdat['PSTH_prefer_cue_aligned']
t=matdat['t'][0]
chanidx=matdat['Channel_all']

print(Nopref.shape),print(' ')
print(Prefer.shape),print(' ')
print(t.shape),print(' ')


chanidx=chanidx.flatten()

print(chanidx.shape)

#%% 
fig,ax=plt.subplots(1,2,figsize=(10,6))
# ax[0].imshow(Nopref,extent=[t[0],t[-1],0,Nopref.shape[0]],origin='upper')
ax[0].imshow(Nopref,extent=[t[0],t[-1],Nopref.shape[0],0],origin='lower')
ax[0].set_aspect(1/ax[0].get_data_ratio())
ax[0].set_xlabel('Time (s)')
ax[0].set_ylabel('Trial/channels')
ax[0].set_title('Nonpreferred movement')


ax[1].imshow(Prefer,extent=[t[0],t[-1],Prefer.shape[0],0],origin='lower')
ax[1].set_aspect(1/ax[0].get_data_ratio())
ax[1].set_xlabel('Time (s)')
ax[1].set_ylabel('Trial/channels')
ax[1].set_title('Preferred movement')

plt.show()
#%% 

# plt.plot(t,Nopref.T)
# plt.show()

print(Nopref.shape)
Nopref=Nopref[np.isfinite(Nopref[:,0]),:]
print(Nopref.shape)

chanidx=chanidx[np.isfinite(Prefer[:,0])]


Prefer=Prefer[np.isfinite(Prefer[:,0]),:]
# plt.plot(t,Nopref[380,:])
# plt.show()

plt.plot(chanidx,'o')
np.unique(chanidx)
set(chanidx) # dat type which contains only the unique data points 

#%% 
# We get a different result 

fig,ax=plt.subplots(1,2,figsize=(10,6))
# ax[0].imshow(Nopref,extent=[t[0],t[-1],0,Nopref.shape[0]],origin='upper')
ax[0].imshow(Nopref,extent=[t[0],t[-1],Nopref.shape[0],0], vmin=0,vmax=10,origin='lower')
ax[0].set_aspect(1/ax[0].get_data_ratio())
ax[0].set_xlabel('Time (s)')
ax[0].set_ylabel('Trial/channels')
ax[0].set_title('Nonpreferred movement')


ax[1].imshow(Prefer,extent=[t[0],t[-1],Prefer.shape[0],0], vmin=0,vmax=10,origin='lower')
ax[1].set_aspect(1/ax[0].get_data_ratio())
ax[1].set_xlabel('Time (s)')
ax[1].set_ylabel('Trial/channels')
ax[1].set_title('Preferred movement')

#%% 

plt.plot(t,Nopref.T)
plt.show()  
Nopref[380,:]


#%% Plot the marginal average 

plt.plot(t,np.mean(Nopref,axis=0),label='Nopref')
plt.plot(t,np.mean(Prefer,axis=0),label='Prefer')
plt.legend()
plt.show()
 
#%%  Create channel covariance matrix 

# compute new data matrices 
nchannels=np.max(chanidx)
channAveNon=np.zeros((nchannels,len(t)))
channAvePref=np.zeros((nchannels,len(t)))

for i in range(1,nchannels+1):
    channAveNon[i-1,:]=np.mean(Nopref[chanidx==i,:],axis=0)
    channAvePref[i-1,:]=np.mean(Prefer[chanidx==i,:],axis=0)
    
print(channAveNon.shape) 



#%% 

fig,ax=plt.subplots(1,2,figsize=(10,6))
# ax[0].imshow(Nopref,extent=[t[0],t[-1],0,Nopref.shape[0]],origin='upper')
ax[0].imshow(channAveNon,extent=[t[0],t[-1],0,nchannels],vmin=0,vmax=10,origin='lower')
ax[0].set_aspect(1/ax[0].get_data_ratio())
ax[0].set_xlabel('Time (s)')
ax[0].set_ylabel('Channels')
ax[0].set_title('Nonpreferred movement')


ax[1].imshow(channAvePref,extent=[t[0],t[-1],0,nchannels],vmin=1,vmax=10,origin='lower')
ax[1].set_aspect(1/ax[0].get_data_ratio())
ax[1].set_xlabel('Time (s)')
ax[1].set_ylabel('Channels')
ax[1].set_title('Preferred movement')

plt.show()



#%% compute covariance matrices 



# mean center the data 
# compute A@A.T
# normalize by n-1


covmatNonPref=np.cov(channAveNon)
covmatPref=np.cov(channAvePref)

plt.imshow(covmatNonPref)
plt.imshow(covmatPref)

covmat2=(covmatNonPref+covmatPref)/2
plt.imshow(covmat2)
plt.xlabel('Channels')
plt.ylabel('Channels')
plt.show()


#%% Run PCA and compute components 
# eigenvectors point in important directions in the space of the matrix 
# eigenvalues tells you how important each of those value are

evals,evecs=np.linalg.eigh(covmat2)
 
sidx=np.argsort(evals)[::-1]

evals=evals[sidx]
evecs=evecs[:,sidx]
plt.plot(evals,'ko',markerfacecolor='w',markersize=12)
plt.xlabel('Components')
plt.ylabel('$\lambda$')
plt.title('Scree plot')

plt.show()


#%%  Compute the PC of the time series 
# you multiply each elements of the eigenvector by each corresponding data channel amd then add all the modulated 
# data channels together 

for i in range(2):
    # find the largest component magnitude 
    maxi=np.argmax(abs(evecs[:,i]))
    evecs[:,i]*=np.sign(evecs[maxi,i]) 


pcNopr=evecs[:,0:2].T @ channAveNon

pcPref=evecs[:,0:2].T @ channAvePref 

plt.plot(t,pcNopr.T,t,pcPref.T)
plt.legend(["Non-preferred c1","Non-preferred c2","Preferred c1","Preferred c2"])
plt.ylabel('Activation (a.u.)')
plt.xlabel("Time (ms)")

# plt.plot(-evecs[:,0:2])

# plt.plot(evecs[:,0:2])




#%% Create a state-Space trajectory 
plt.plot(pcPref[0,:],pcPref[1,:],linewidth=5,label='Preferred')
plt.plot(pcNopr[0,:],pcNopr[1,:],linewidth=5,label='Non-preferred')
plt.xlabel('PC1')
plt.ylabel('PC2')
plt.legend()
plt.gca().set_aspect(1/plt.gca().get_data_ratio())
plt.show()

# Drawing time as hue 

plt.scatter(pcNopr[0,:],pcNopr[1,:],cmap='Purples',c=t)
plt.scatter(pcPref[0,:],pcPref[1,:],cmap='Greens',c=t)
plt.colorbar()
plt.gca().set_aspect(1/plt.gca().get_data_ratio())
plt.xlabel('PC1')
plt.ylabel('PC2')

plt.show()





































































































































































































